  Globaltimezone.cpp
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16): warning C4267: 'initializing': conversion from 'size_t' to '_Ty1', possible loss of data
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16): warning C4267:         with
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16): warning C4267:         [
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16): warning C4267:             _Ty1=int
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16): warning C4267:         ]
  (compiling source file '../Globaltimezone/Globaltimezone/Globaltimezone.cpp')
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\utility(250,16):
  the template instantiation context (the oldest one first) is
  	C:\Users\hama\source\repos\Globaltimezone\Globaltimezone\Globaltimezone.cpp(228,45):
  	see reference to function template instantiation 'std::pair<int,std::string>::pair<unsigned __int64,std::string&,0>(_Other1 &&,_Other2) noexcept(false)' being compiled
          with
          [
              _Other1=unsigned __int64,
              _Other2=std::string &
          ]
  		C:\Users\hama\source\repos\Globaltimezone\Globaltimezone\Globaltimezone.cpp(228,27):
  		see the first reference to 'std::pair<int,std::string>::pair' in 'Globaltimezone::addFavTimeZ'
  
  TimeZoneConverter.cpp
C:\Users\hama\source\repos\Globaltimezone\Globaltimezone\TimeZoneConverter.cpp(23,34): warning C4244: '=': conversion from 'double' to 'int', possible loss of data
  Generating Code...
  TimeZoneApplication2.vcxproj -> C:\Users\hama\source\repos\TimeZoneApplication2\x64\Debug\TimeZoneApplication2.exe
